// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rocket

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RocketServiceClient is the client API for RocketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RocketServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (RocketService_StatusClient, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (RocketService_LogsClient, error)
	AvailableVersions(ctx context.Context, in *AvailableVersionsRequest, opts ...grpc.CallOption) (*AvailableVersionsResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
}

type rocketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRocketServiceClient(cc grpc.ClientConnInterface) RocketServiceClient {
	return &rocketServiceClient{cc}
}

func (c *rocketServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/rocket.v1.RocketService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rocketServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/rocket.v1.RocketService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rocketServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/rocket.v1.RocketService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rocketServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/rocket.v1.RocketService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rocketServiceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (RocketService_StatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &RocketService_ServiceDesc.Streams[0], "/rocket.v1.RocketService/Status", opts...)
	if err != nil {
		return nil, err
	}
	x := &rocketServiceStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RocketService_StatusClient interface {
	Recv() (*StatusResponse, error)
	grpc.ClientStream
}

type rocketServiceStatusClient struct {
	grpc.ClientStream
}

func (x *rocketServiceStatusClient) Recv() (*StatusResponse, error) {
	m := new(StatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rocketServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, "/rocket.v1.RocketService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rocketServiceClient) Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (RocketService_LogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &RocketService_ServiceDesc.Streams[1], "/rocket.v1.RocketService/Logs", opts...)
	if err != nil {
		return nil, err
	}
	x := &rocketServiceLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RocketService_LogsClient interface {
	Recv() (*LogsResponse, error)
	grpc.ClientStream
}

type rocketServiceLogsClient struct {
	grpc.ClientStream
}

func (x *rocketServiceLogsClient) Recv() (*LogsResponse, error) {
	m := new(LogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rocketServiceClient) AvailableVersions(ctx context.Context, in *AvailableVersionsRequest, opts ...grpc.CallOption) (*AvailableVersionsResponse, error) {
	out := new(AvailableVersionsResponse)
	err := c.cc.Invoke(ctx, "/rocket.v1.RocketService/AvailableVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rocketServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/rocket.v1.RocketService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RocketServiceServer is the server API for RocketService service.
// All implementations should embed UnimplementedRocketServiceServer
// for forward compatibility
type RocketServiceServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Status(*StatusRequest, RocketService_StatusServer) error
	GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error)
	Logs(*LogsRequest, RocketService_LogsServer) error
	AvailableVersions(context.Context, *AvailableVersionsRequest) (*AvailableVersionsResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
}

// UnimplementedRocketServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRocketServiceServer struct {
}

func (UnimplementedRocketServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRocketServiceServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRocketServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRocketServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRocketServiceServer) Status(*StatusRequest, RocketService_StatusServer) error {
	return status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedRocketServiceServer) GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedRocketServiceServer) Logs(*LogsRequest, RocketService_LogsServer) error {
	return status.Errorf(codes.Unimplemented, "method Logs not implemented")
}
func (UnimplementedRocketServiceServer) AvailableVersions(context.Context, *AvailableVersionsRequest) (*AvailableVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AvailableVersions not implemented")
}
func (UnimplementedRocketServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}

// UnsafeRocketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RocketServiceServer will
// result in compilation errors.
type UnsafeRocketServiceServer interface {
	mustEmbedUnimplementedRocketServiceServer()
}

func RegisterRocketServiceServer(s grpc.ServiceRegistrar, srv RocketServiceServer) {
	s.RegisterService(&RocketService_ServiceDesc, srv)
}

func _RocketService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RocketServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rocket.v1.RocketService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RocketServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RocketService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RocketServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rocket.v1.RocketService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RocketServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RocketService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RocketServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rocket.v1.RocketService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RocketServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RocketService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RocketServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rocket.v1.RocketService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RocketServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RocketService_Status_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RocketServiceServer).Status(m, &rocketServiceStatusServer{stream})
}

type RocketService_StatusServer interface {
	Send(*StatusResponse) error
	grpc.ServerStream
}

type rocketServiceStatusServer struct {
	grpc.ServerStream
}

func (x *rocketServiceStatusServer) Send(m *StatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RocketService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RocketServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rocket.v1.RocketService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RocketServiceServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RocketService_Logs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RocketServiceServer).Logs(m, &rocketServiceLogsServer{stream})
}

type RocketService_LogsServer interface {
	Send(*LogsResponse) error
	grpc.ServerStream
}

type rocketServiceLogsServer struct {
	grpc.ServerStream
}

func (x *rocketServiceLogsServer) Send(m *LogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RocketService_AvailableVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvailableVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RocketServiceServer).AvailableVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rocket.v1.RocketService/AvailableVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RocketServiceServer).AvailableVersions(ctx, req.(*AvailableVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RocketService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RocketServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rocket.v1.RocketService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RocketServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RocketService_ServiceDesc is the grpc.ServiceDesc for RocketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RocketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rocket.v1.RocketService",
	HandlerType: (*RocketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _RocketService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RocketService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RocketService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RocketService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _RocketService_GetAll_Handler,
		},
		{
			MethodName: "AvailableVersions",
			Handler:    _RocketService_AvailableVersions_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _RocketService_Register_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Status",
			Handler:       _RocketService_Status_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Logs",
			Handler:       _RocketService_Logs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rocket/v1/rocket.proto",
}
